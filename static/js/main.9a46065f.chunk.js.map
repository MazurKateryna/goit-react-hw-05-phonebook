{"version":3,"sources":["components/ContactsEditor/ContactEditor.js","components/ContactList/ContactList.js","components/Filter.js","components/AlertMessage/AlertMessage.js","components/App.js","index.js"],"names":["ContactEditor","state","name","number","handleChangeName","e","setState","target","value","handleChangeNumber","handleSubmit","preventDefault","props","onAddContact","id","uuidv4","this","className","onSubmit","type","onChange","Component","ContactList","contacts","onRemoveContact","TransitionGroup","component","map","contact","CSSTransition","timeout","classNames","onClick","Filter","onChangeFilter","AlertMessage","alert","closeAlert","in","unmountOnExit","App","filter","addContact","objectContact","find","prevState","removeContact","changeFilter","getFilterContact","toLowerCase","includes","toLocaleLowerCase","persistedContact","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filterContact","appear","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a46065f.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactEditor.css'\r\n\r\nexport default class ContactEditor extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n state = {\r\n   name: '',\r\n   number: '',\r\n };\r\n\r\n handleChangeName = e => {\r\n   this.setState({\r\n     name: e.target.value,\r\n   });\r\n };\r\n\r\n handleChangeNumber = e => {\r\n   this.setState({\r\n     number: e.target.value,\r\n   });\r\n };\r\n\r\n handleSubmit = e => {\r\n   e.preventDefault();\r\n   this.props.onAddContact({...this.state, id: uuidv4()});\r\n   this.setState( { name: '', number: ''});\r\n };\r\n\r\n render(){\r\n   const { name, number } = this.state;\r\n   return (\r\n    <form className=\"ContactEditor\" onSubmit={this.handleSubmit}>\r\n    <label className=\"ContactEditor-label\">\r\n      Name\r\n      <input\r\n        className=\"ContactEditor-input\"\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={this.handleChangeName}\r\n      />\r\n    </label>\r\n    <label className=\"ContactEditor-label\">\r\n      Number\r\n      <input\r\n        className=\"ContactEditor-input\"\r\n        type=\"text\"\r\n        value={number}\r\n        onChange={this.handleChangeNumber}\r\n      />\r\n    </label>\r\n\r\n    <button type=\"submit\" className=\"ContactEditor-button\">\r\n      Add contact\r\n    </button>\r\n  </form>\r\n   )\r\n }\r\n}","import React from 'react';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\r\nimport './ContactList.css'\r\n\r\nconst ContactList = ({ contacts, onRemoveContact}) => (\r\n  <TransitionGroup component='ul' className=\"ContactList\">\r\n    {contacts.map(contact => (\r\n      <CSSTransition key={contact.id} timeout={500} classNames=\"ContactList-item\">\r\n        <div className=\"ContactList-item\">\r\n          <div className=\"ContactList-text\">{contact.name}: {contact.number}</div>\r\n          <button\r\n          type=\"button\"\r\n          className=\"ContactList-button\"\r\n          onClick={() => onRemoveContact(contact.id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport './ContactsEditor/ContactEditor.css';\r\n\r\nexport default function Filter({ value, onChangeFilter}) {\r\n  return (\r\n    <div className=\"ContactEditor\">\r\n      <p>Find contact by name</p>\r\n      <input \r\n      type=\"text\" \r\n      className=\"ContactEditor-input\" \r\n      value={value} \r\n      onChange={e => onChangeFilter(e.target.value)} \r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport './AlertMessage.css';\r\n\r\nfunction AlertMessage ({alert, closeAlert}) {\r\n  return (\r\n    <CSSTransition classNames='alert' in={alert} timeout={250} unmountOnExit>\r\n      <div className='alert' onClick={closeAlert}>\r\n        <span className='alert-message'>\r\n          Contact already exists!\r\n        </span>\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default AlertMessage;","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group'\nimport ContactEditor from '../components/ContactsEditor/ContactEditor';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from \"./Filter\";\nimport AlertMessage from \"./AlertMessage/AlertMessage\"\nimport './App.css'\n\nimport PropTypes from 'prop-types';\n\nclass App extends Component  {\n  static propTypes = {\n    contacts: PropTypes.array,\n    filter: PropTypes.string,\n    alert: PropTypes.bool,\n  }\n  \n  state = {\n    contacts: [],\n    filter: '',\n    alert: false,\n  };\n\n  componentDidMount() {\n    const persistedContact = localStorage.getItem('contacts')\n    \n    if(persistedContact) {\n      this.setState({\n        contacts: JSON.parse(persistedContact)\n      })\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  };\n\n  addContact = objectContact => {\n    this.state.contacts.find(contact => contact.name === objectContact.name)\n    ? this.setState((prevState) => ({ alert: true }))\n      : this.setState(prevState => {\n        return {\n          contacts: [\n            ...prevState.contacts,\n            objectContact],\n        } \n      })  \n  };\n\n  closeAlert = () => {\n    this.setState((prevState) => ({ alert: !prevState.alert }));\n  };\n\n  removeContact = id => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(contact => contact.id !== id)\n      }\n    })\n  };\n\n  changeFilter = filter => {\n    this.setState({ filter});\n  };\n\n  getFilterContact = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLocaleLowerCase()),\n      );\n  };\n \n  render () {\n    const {contacts, filter, alert} = this.state;\n    const filterContact = this.getFilterContact();\n    return (\n      <div className='wrapper'>\n        <div className='header'>\n          <CSSTransition\n            in={true}\n            appear={true}\n            classNames='fade'\n            timeout={500}\n            unmountOnExit\n          >\n            <h1 className='logo'>Phonebook</h1>\n          </CSSTransition>\n\n          <AlertMessage closeAlert={this.closeAlert} alert={alert}/>\n        </div>\n        \n        <ContactEditor onAddContact={this.addContact}/>\n       \n        {contacts.length > 0 && (\n          <CSSTransition\n          in={true}\n          appear={true}\n          classNames='fade'\n          timeout={500}\n          unmountOnExit\n          >\n            <div>\n              <h2>Contacts</h2>\n              <Filter \n              value={filter} \n              onChangeFilter={this.changeFilter}/>\n              <ContactList \n              contacts={filterContact} \n              onRemoveContact={this.removeContact}/>\n            </div>\n          </CSSTransition>\n        )}\n      </div>\n    )\n  };\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}